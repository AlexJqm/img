import discord
import pymongo
import os
from discord.ext import commands
from os.path import join, dirname
from dotenv import load_dotenv
from database.connect import db_connect
from PIL import Image, ImageDraw, ImageFilter, ImageFont
import requests
import subprocess


dotenv_path = join(dirname(__file__), '.env')
load_dotenv(dotenv_path)

servers = db_connect()
server_dict = {'Alfa':'ðŸ‡¦','Bravo':'ðŸ‡§','Charlie':'ðŸ‡¨','Delta':'ðŸ‡©','Echo':'ðŸ‡ª','Foxtrot':'ðŸ‡«','Golf':'ðŸ‡¬','Hotel':'ðŸ‡­','India':'ðŸ‡®','Juliett':'ðŸ‡¯','Kilo':'ðŸ‡°','Lima':'ðŸ‡±','Mike':'ðŸ‡²','November':'ðŸ‡³','Oscar':'ðŸ‡´','Papa':'ðŸ‡µ','Quebec':'ðŸ‡¶','Romeo':'ðŸ‡·','Sierra':'ðŸ‡¸','Tango':'ðŸ‡¹','Uniform':'ðŸ‡º','Victor':'ðŸ‡»','Whiskey':'ðŸ‡¼','X-ray':'ðŸ‡½','Yankee':'ðŸ‡¾','Zulu':'ðŸ‡¿'}

class Utils(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        
    @commands.command(pass_context = True, aliases=['reg'])
    async def register(self, ctx):
        await ctx.channel.purge(limit = 1)
        role = [role.name for role in ctx.message.author.roles if role.name == "Admin" or role.name == "Security"]
        if 'Admin' in role or 'Security' in role:
            embed = discord.Embed(title = "Bienvenue", description = "Merci de vouloir rejoindre notre communautÃ©. Afin de que tout le monde puisse jouer dans des bonnes conditions, je vous invite Ã  lire les rÃ¨gles du serveur avant de vous enregistrer ici: <#757321244000649387>", color = 0xf7f7f7)
            embed.add_field(name = "\u200B", value = "Une fois enregistrer, lisez attentivement les explications dans chaque channel, afin de comprendre le fonctionnement du serveur. Si vous rencontrez des problÃ¨mes, vous pouvez contacter l'Ã©quipe de <@&757263307987222569> <@&759375942887538720> dans le salon <#758303712660815893>.", inline = False)
            embed.set_author(name = "Among Us France", icon_url= self.bot.user.avatar_url)
            embed.set_thumbnail(url = self.bot.user.avatar_url)
            embed.add_field(name = "\u200B", value = "ðŸ‘‡ Enregistre toi ici!", inline = False)
            msg = await ctx.channel.send(embed = embed)
            
            while True:
                reactmoji = ['ðŸ†•']
                for react in reactmoji: await msg.add_reaction(react)
                
                def check_react(reaction, user):
                    if reaction.message.id != msg.id: return False
                    if user.id == int(os.getenv("BOT_ID")): return False
                    if str(reaction.emoji) not in reactmoji: return False
                    return True
                
                res, user = await self.bot.wait_for('reaction_add', check = check_react)
                
                if 'ðŸ†•' in str(res.emoji):
                    await msg.remove_reaction(res.emoji, user)
                    await user.add_roles(discord.utils.get(ctx.message.author.guild.roles, name = "Membre"))
                
                if str(res.emoji) not in reactmoji: await msg.remove_reaction(res.emoji, user)

    @commands.command(pass_context = True)
    async def clear(self, ctx):
        role = [role.name for role in ctx.message.author.roles if role.name == "Admin"]
        if 'Admin' in role:
            await ctx.channel.purge()

    @commands.command(pass_context = True)
    async def rules(self, ctx, msgID: int):
        await ctx.channel.purge(limit = 1)
        msg = await ctx.fetch_message(msgID)
        role = [role.name for role in ctx.message.author.roles if role.name == "Admin"]
        if 'Admin' in role:
            embed = discord.Embed(title = "Les rÃ¨gles", description = "Le serveur Discord de Among Us Francophone est un lieu de vie commune oÃ¹ vous rencontrerez des joueurs / joueuses de tout Ã¢ge et de tout horizon. Il est donc impÃ©ratif de bien lire ce rÃ¨glement pour Ã©viter tout dÃ©bordement. Nous sommes particuliÃ¨rement attentifs et vigilants aux contenus proposÃ©s par les joueurs dans les channels textuels et Ã©mis dans les channels vocaux. Nous vous recommandons donc de faire attention a vos propos.", color = 0xf7f7f7)
            embed.add_field(name = "**0.** Nous suivons les termes d'utilisation de Discord", value = "â€¢ Charte dâ€™Utilisation de la CommunautÃ©:\nhttps://discordapp.com/guidelines\nâ€¢ Conditions d'Utilisation:\nhttps://discordapp.com/terms", inline = False)
            embed.add_field(name = "\u200B", value = "**1.** Soyez tout simplement respectueux et gentil les uns envers les autres, c'est un jeu. Restez polis et courtois. Les formules de politesse telles que 'Bonjour/Au revoir/Merci/S'il te plait' n'ont jamais tuÃ© personne.", inline = False)
            embed.add_field(name = "\u200B", value = "**2.** Il est strictement interdit de grief (troll/anti-jeu), par exemple si vous mourrez, vous ne parlez pas.", inline = False)
            embed.add_field(name = "\u200B", value = "**3.** Utilisez un pseudo correct, non insultant ou provocant et ne doit pas contenir de caractÃ¨res non mentionnable. Vous pouvez signaler tout pseudo qui vous paraÃ®t ne pas Ãªtre conforme au rÃ¨glement. La modÃ©ration se rÃ©serve le droit de supprimer votre pseudo. MÃªme rÃ¨glement pour les avatars.", inline = False)
            embed.add_field(name = "\u200B", value = "**4.** Le spam sur le discord est bien Ã©videmment interdit ainsi que toute sorte de harcÃ¨lement ou de jugement raciste et/ou faisant la promotion d'une quelconque sorte de haine.", inline = False)
            embed.add_field(name = "\u200B", value = "**5.** Aucun contenu NSFW n'est autorisÃ© (Not Safe For Work) autrement dit pornographique ou choquant.", inline = False)
            embed.add_field(name = "\u200B", value = "**6.** Quand vous Ãªtes en vocal vous **DEVEZ**:\n**6.1** - ÃŠtre mute jusqu'Ã  tant qu'un 'meeting' commence.\n**6.2** - Mute dÃ¨s que le vote est terminÃ©. Pas aprÃ¨s.\n**6.3** - Ne plus parler dÃ¨s que vous Ãªtes mort.\n**6.4** - Ne restez pas AFK.\n**6.5** - Avoir un micro acceptable.\n**6.6** - Ces rÃ¨gles sont gÃ©nÃ©rales, vous pouvez crÃ©er vos propres rÃ¨gles si tout le monde est d'accord avec avant le dÃ©but de la partie. Nous vous connectons, mais ne crÃ©ons pas de rÃ¨gles.", inline = False)
            embed.add_field(name = "\u200B", value = "**7.** Veillez Ã  utiliser les channels appropriÃ© a vos demandes.", inline = False)
            embed.add_field(name = "\u200B", value = "**8.** Toute insulte ou divulgation d'informations personnelles est strictement interdite.", inline = False)
            embed.add_field(name = "\u200B", value = "**9.** Merci de ne pas explicitivement montrer publiquement vos opinions politiques, religieuses ou tout autre pouvant crÃ©er un dÃ©bat stÃ©rile.", inline = False)
            embed.add_field(name = "\u200B", value = "**10.** En cas de problÃ¨mes, spams MP/DM, insultes, menaces, caractÃ¨res raciste et 'j'en-passe', contactez l'un des modÃ©rateurs disponible avec le channel #report sans oubliez de mentionner le joueur et le channel qui nÃ©cessite une intervention et Ã©crivez un signalement avec si possible des preuves.", inline = False)
            embed.add_field(name = "\u200B", value = "Si vous Ãªtes pas content dâ€™une sanction ou warn , nous sommes aptes Ã  discutez avec vous. Dans le respect et faire une Ã©tude de cas.", inline = False)
            embed.add_field(name = "\u200B", value = "Sachez que le staff communique via un channel privÃ© et invisible. Chaque problÃ¨me sera donc automatiquement connu par tout les membres. Inutile de spam un staff.", inline = False)
            embed.add_field(name = "\u200B", value = "**11.** Toute sorte de pub ou promotion est interdite sans l'accord de la modÃ©ration.", inline = False)
            embed.add_field(name = "\u200B", value = "ðŸ‘‡ Appuie ici si tu les as lu. Merci!", inline = False)
            embed.set_thumbnail(url = self.bot.user.avatar_url)
            embed.set_author(name = "Among Us France", icon_url= self.bot.user.avatar_url)
            await msg.edit(embed = embed)
            
    @commands.command(pass_context = True)
    async def move(self, ctx, member: discord.Member = None, channel_id = None):
        await ctx.channel.purge(limit = 1)
        role = [role.name for role in ctx.message.author.roles if role.name == "Admin" or role.name == "Security"]
        if 'Admin' in role or 'Security' in role:
            channel = ctx.message.author.voice.channel
            voice = discord.utils.get(self.bot.voice_clients, guild = ctx.guild)
            if voice and voice.is_connected(): await voice.move_to(channel)
            else: voice = await channel.connect()
        
    @commands.command(pass_context = True)
    async def movebot(self, ctx):
        role = [role.name for role in ctx.message.author.roles if role.name == "Admin" or role.name == "Security"]
        if 'Admin' in role or 'Security' in role:
            await ctx.channel.purge(limit = 1)
            channel = ctx.message.author.voice.channel
            voice = discord.utils.get(self.bot.voice_clients, guild = ctx.guild)
            if voice and voice.is_connected(): await voice.move_to(channel)
            else: voice = await channel.connect()
        
    @commands.command(pass_context = True)
    async def total(self, ctx):
        role = [role.name for role in ctx.message.author.roles if role.name == "Admin" or role.name == "Security"]
        if 'Admin' in role or 'Security' in role:
            total = 0
            for channel in ctx.message.author.guild.voice_channels:
                total += len(channel.members)
            await ctx.send(total)

    @commands.command(pass_context = True)
    async def find(self, ctx, member: discord.Member = None):
        role = [role.name for role in ctx.message.author.roles if role.name == "Admin" or role.name == "Security"]
        if 'Admin' in role or 'Security' in role:
            await ctx.send(member.joined_at)
    
    @commands.command(pass_context = True)
    async def exec(self, ctx, *args):        
        role = [role.name for role in ctx.message.author.roles if role.name == "Admin"]
        if 'Admin' in role:
            arg = " ".join(args)
            print(arg)
            out = subprocess.Popen(arg, shell=True, stdout=subprocess.PIPE)
            subprocess_return = out.stdout.read()
            out = str(subprocess_return)
            out = out.replace('\\n', '\n').replace('\\t', '\t')
            await ctx.send(f"`{out[2:-1]}`")
    
def setup(bot):
    bot.add_cog(Utils(bot))