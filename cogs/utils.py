import discord
import pymongo
import os
from discord.ext import commands
from os.path import join, dirname
from dotenv import load_dotenv
from database.connect import db_connect

dotenv_path = join(dirname(__file__), '.env')
load_dotenv(dotenv_path)

servers = db_connect()
server_dict = {'Alfa':'ğŸ‡¦','Bravo':'ğŸ‡§','Charlie':'ğŸ‡¨','Delta':'ğŸ‡©','Echo':'ğŸ‡ª','Foxtrot':'ğŸ‡«','Golf':'ğŸ‡¬','Hotel':'ğŸ‡­','India':'ğŸ‡®','Juliett':'ğŸ‡¯','Kilo':'ğŸ‡°','Lima':'ğŸ‡±','Mike':'ğŸ‡²','November':'ğŸ‡³','Oscar':'ğŸ‡´','Papa':'ğŸ‡µ','Quebec':'ğŸ‡¶','Romeo':'ğŸ‡·','Sierra':'ğŸ‡¸','Tango':'ğŸ‡¹','Uniform':'ğŸ‡º','Victor':'ğŸ‡»','Whiskey':'ğŸ‡¼','X-ray':'ğŸ‡½','Yankee':'ğŸ‡¾','Zulu':'ğŸ‡¿'}

class Utils(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        
    @commands.command(pass_context = True, aliases=['reg'])
    async def register(self, ctx):
        await ctx.channel.purge(limit = 1)
        role = [role.name for role in ctx.message.author.roles if role.name == "Admin" or role.name == "ModÃ©rateur"]
        if 'Admin' in role or 'ModÃ©rateur' in role:
            embed = discord.Embed(title = "Bienvenue", description = "Merci de vouloir rejoindre notre communautÃ©. Afin de que tout le monde puisse jouer dans des bonnes conditions, je vous invite Ã  lire les rÃ¨gles du serveur avant de vous enregistrer ici: <#757321244000649387>", color = 0xf7f7f7)
            embed.add_field(name = "\u200B", value = "Une fois enregistrer, lisez attentivement les explications dans chaque channel, afin de comprendre le fonctionnement du serveur. Si vous rencontrez des problÃ¨mes, vous pouvez contacter l'Ã©quipe de <@&757263307987222569> <@&759375942887538720> dans le salon <#758303712660815893>.", inline = False)
            embed.set_author(name = "Among Us France", icon_url= self.bot.user.avatar_url)
            embed.set_thumbnail(url = self.bot.user.avatar_url)
            embed.add_field(name = "\u200B", value = "ğŸ‘‡ Enregistre toi ici!", inline = False)
            msg = await ctx.channel.send(embed = embed)
            
            while True:
                reactmoji = ['ğŸ†•']
                for react in reactmoji: await msg.add_reaction(react)
                
                def check_react(reaction, user):
                    if reaction.message.id != msg.id: return False
                    if user.id == int(os.getenv("BOT_ID")): return False
                    if str(reaction.emoji) not in reactmoji: return False
                    return True
                
                res, user = await self.bot.wait_for('reaction_add', check = check_react)
                
                if 'ğŸ†•' in str(res.emoji):
                    await msg.remove_reaction(res.emoji, user)
                    await user.add_roles(discord.utils.get(ctx.message.author.guild.roles, name = "Membre"))
                
                if str(res.emoji) not in reactmoji: await msg.remove_reaction(res.emoji, user)

    @commands.command(pass_context = True)
    async def stats(self, ctx):
        online_player = sum(member.status != discord.Status.offline and not member.bot for member in ctx.message.guild.members)
        print(online_player)
        await ctx.channel.purge(limit=1)
        role = [role.name for role in ctx.message.author.roles if role.name == "Admin" or role.name == "ModÃ©rateur"]
        if 'Admin' in role or 'ModÃ©rateur' in role:
            def reload(total_server, total_player, online_player):
                for i in server_dict.keys():
                    try:
                        channel = discord.utils.get(ctx.guild.channels, name = i)
                        if channel.name is not None:
                            total_server += 1
                            total_player += len(channel.members)
                    except: pass
                    pass
                online_player = sum(member.status != discord.Status.offline and not member.bot for member in ctx.message.guild.members)
                return(total_server, total_player, online_player)
            
            total_server, total_player, online_player = 0,0,0
            total_server, total_player, online_player = reload(total_server, total_player, online_player)
            
            embed = discord.Embed(title = "Statistiques", description = "Pour afficher les statistiques en temps rÃ©el,\nveuillez rafraichir avec l'Ã©moji = ğŸ”„", color = 0xf7f7f7)
            embed.add_field(name = "\u200B", value = "Joueurs en jeu:\nNombre de serveurs:\nJoueurs en ligne:", inline = True)
            embed.add_field(name = "\u200B", value = "\u200B", inline = True)
            embed.add_field(name = "\u200B", value = f"{total_player}\n{total_server}\n{online_player}", inline = True)
            embed.add_field(name = "\u200B", value = "ğŸ‘‡ Rafraichis ici!", inline = False)
            embed.set_author(name = "Among Us France", icon_url= self.bot.user.avatar_url)
            embed.set_thumbnail(url = self.bot.user.avatar_url)
            msg = await ctx.send(embed = embed)
            
            while True:
                reactmoji = ['ğŸ”„']
                for react in reactmoji:
                    await msg.add_reaction(react)
                def check_react(reaction, user):
                    if reaction.message.id != msg.id: return False
                    if user.id == int(os.getenv("BOT_ID")): return False
                    if str(reaction.emoji) not in reactmoji: return False
                    return True
                res, user = await self.bot.wait_for('reaction_add', check = check_react)
                if 'ğŸ”„' in str(res.emoji):
                    embed.clear_fields()
                    total_server, total_player, online_player = 0,0,0
                    total_server, total_player, online_player = reload(total_server, total_player, online_player)
                    embed.add_field(name = "\u200B", value = "Joueurs en jeu:\nNombre de serveurs:\nJoueurs en ligne:", inline = True)
                    embed.add_field(name = "\u200B", value = "\u200B", inline = True)
                    embed.add_field(name = "\u200B", value = f"{total_player}\n{total_server}\n{online_player}", inline = True)
                    embed.add_field(name = "\u200B", value = "ğŸ‘‡ Rafraichis ici!", inline = False)
                    await msg.remove_reaction(res.emoji, user)
                    await msg.edit(embed = embed)
                if str(res.emoji) not in reactmoji: await msg.remove_reaction(res.emoji, user)

    @commands.command(pass_context = True)
    async def clear(self, ctx):
        role = [role.name for role in ctx.message.author.roles if role.name == "Admin" or role.name == "ModÃ©rateur"]
        if 'Admin' in role or 'ModÃ©rateur' in role:
            await ctx.channel.purge()

    @commands.command(pass_context = True)
    async def tt1(self, ctx):
        role = [role.name for role in ctx.message.author.roles if role.name == "Admin" or role.name == "ModÃ©rateur"]
        if 'Admin' in role or 'ModÃ©rateur' in role:
            embed = discord.Embed(title = "__Comment Ã§a fonctionne:__", description = "Le classement ELO attribue au joueur, suivant ses performances passÃ©es, un nombre de points tel que deux joueurs supposÃ©s de mÃªme force aient le mÃªme nombre de points. Plus le joueur est performant et plus son nombre de points ELO est Ã©levÃ©. Si un joueur rÃ©alise une performance supÃ©rieure Ã  son niveau estimÃ©, il gagne des points ELO. RÃ©ciproquement, il en perd s'il rÃ©alise une contre-performance.", color = 0xf7f7f7)
            embed.add_field(name = "__**Leaderboards:**__", value = "Overall - Impostor - Crewmate", inline = False)
            embed.add_field(name = "**Lancer un match classÃ©:**", value = "__Etape 1:__ 10 joueurs rejoignent le salon vocal #ranked.\n__Etape 2:__ Assurez-vous que les paramÃ¨tres de la partie correspondent Ã  nos rÃ¨gles.\n__Etape 3:__ Ecrivez `!start polus`, `!start skeld`, ou `!start mira` dans le salon textuel dÃ©dier Ã  votre serveur vocal.\n> Les joueurs se verront attribuer un numÃ©ro, qui sera utilisÃ© pour identifier qui sont les imposteurs lors de la soumission des rÃ©sultats.", inline = False)
            embed.add_field(name = "**Pour soumettre le rÃ©sultat d'un match:**", value = "Ecrivez `!impostor # # win` ou `!impostor # # lose`.\n> # est remplacÃ© par les numÃ©ros des joueurs qui sont les imposteurs.\n*Par exemple: si le joueur 3 et le joueur 7 sont des imposteurs et qu'ils ont gagnÃ©, la commande serait:*\n`!impostor 3 7 w`\nSi les rÃ©sultats sont inexacts, 1 joueur peut cliquer sur :no_entry: pour laisser le match non validÃ©.\nLes rÃ©sultats sont soumis dÃ¨s que 5 joueurs cliquent sur âœ… pour confirmer les rÃ©sultats.\nUne fois confirmÃ©s, les rÃ©sultats ne peuvent pas Ãªtre modifiÃ©s.", inline = False)
            embed.add_field(name = "**Autres commandes:**", value = "`!stats` -- Affiche l'ensemble de vos stats et de vos ELO.\n`!map` -- Voir les stats par carte.\n`!current` -- Liste des matchs non validÃ©.\n`!cancel` -- Supprime un match non validÃ©.\n`!leaderboard` -- Affiche le classement de la saison en cours.", inline = False)
            embed.add_field(name = "__**RÃ¨gles:**__", value = "1. Les participants sont responsables de s'assurer que les matchs sont correctement lancÃ©s et soumis.\n2. Toute forme de triche sera sÃ©vÃ¨rement sanctionnÃ© et pourra entraÃ®ner un bannissement.\n3. Si un membre remarque une tricherie, signalez-le dans le salon #report.\n4. Les spectateurs peuvent Ãªtre considÃ©rÃ©s comme des complices et donc comme de la tricherie.", inline = False)
            embed.set_author(name = "Among Us Francophone", icon_url= self.bot.user.avatar_url)
            embed.set_footer(text = "Among Us Francophone - DerniÃ¨re mise Ã  jour: 08/10/2020")
            msg = await ctx.send(embed = embed)

    @commands.command(pass_context = True)
    async def tt2(self, ctx):
        role = [role.name for role in ctx.message.author.roles if role.name == "Admin" or role.name == "ModÃ©rateur"]
        if 'Admin' in role or 'ModÃ©rateur' in role:
            embed = discord.Embed(title = "**Among Us Francophone Challenge #1**", description = "> ÃŠtes-vous le <@&763675029723545621>?\n> ÃŠtes-vous le prochain <@&763675011550150716>?\n> Ou Ãªtes-vous le prochain <@&763675102105174026>?\n> Pouvez-vous Ãªtre parmi les meilleurs de nos classements?\n> Venez vous classer parmi nous!", color = 0xf7f7f7)
            embed.add_field(name = "**Lancement le DATE jusqu'au DATE**", value = "1. Among Us Francophone Challenge #1 est un tournoi sur 4 semaines, du DATE au DATE. \n2. Tous les <@&757888566553477161> peuvent participer.\n3. Les gagnants du tournoi sont jugÃ©s par leur ELO et leur rang.\n4. L'ELO est calculÃ© Ã  partir des rÃ©sultats des matchs soumis Ã  <@763443258889338900>, dÃ©crits dans #comment-Ã§a-fonctionne\n5. Les classements sont rÃ©initialisÃ©s au dÃ©but du tournoi.\n6. Les matchs du tournoi doivent se dÃ©rouler avec les paramÃ¨tres de la carte indiquÃ©s dans #paramÃ¨tre-de-match\n7. Une inactivitÃ© de plus de 7 jours entraÃ®nera la perte d'une partie du MMR.\n8. Tous les prix sont exclusifs les uns des autres, ainsi un participant ne peut pas obtenir plus d'un prix.", inline = False)
            embed.add_field(name = "__**Prix:**__", value = "1er Overall <@&763675029723545621>\n1er Crewmate <@&763675011550150716>\n1er Impostor <@&763675102105174026>", inline = True)
            embed.add_field(name = "\u200B", value = "2Ã¨me Overall\n3Ã¨me Overall", inline = True)
            embed.set_author(name = "Among Us Francophone", icon_url= self.bot.user.avatar_url)
            embed.set_footer(text = "Among Us Francophone - DerniÃ¨re mise Ã  jour: 08/10/2020")
            msg = await ctx.send(embed = embed)
            
def setup(bot):
    bot.add_cog(Utils(bot))